<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nr on </title>
    <link>https://peaceful-sinoussi-a9ee70.netlify.com/tags/nr/</link>
    <description>Recent content in Nr on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright notice</copyright>
    <lastBuildDate>Mon, 01 Jul 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://peaceful-sinoussi-a9ee70.netlify.com/tags/nr/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PDCCH Visualizer in IMGUI</title>
      <link>https://peaceful-sinoussi-a9ee70.netlify.com/posts/pdcchvis/</link>
      <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://peaceful-sinoussi-a9ee70.netlify.com/posts/pdcchvis/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been working on a tool that will let me visualize the PDCCH resources in NR, and I will show and discuss some of its features in this post. &lt;br&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve always thought that one way to understand something is to program a computer to do it. In the job of doing that, I typically find out gaps in my knowledge or even more so, areas for which I had only a superficial understanding for - &amp;ldquo;“The best way to understand something is to teach it to a computer” [1].&lt;/p&gt;

&lt;h2 id=&#34;overview:c923872a82b4ab06f1d7ea7167df723b&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The purpose of the tool is to show what PDCCH resources in the time-frequency grid will be monitored by a UE to decode PDCCH candidates. &lt;br&gt;
The information is presented in a time-frequency grid in which each element in the grid is an REG in a single slot. PDCCH candidates are selected by the user and the REGs are colored showing which are used to carry CCEs.&lt;br&gt;
The precise location of these elements depends on the chosen PDCCH configuration, the slot, UE and candidate(s) that have been selected.&lt;br&gt;&lt;br&gt;
There is support to visualize multiple UEs.
&lt;br&gt;&lt;/p&gt;

&lt;h2 id=&#34;windows:c923872a82b4ab06f1d7ea7167df723b&#34;&gt;Windows&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a screenshot of how the program looks when you open it up.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis1.png&#34; alt=&#34;image1&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;There are four &amp;ldquo;Windows&amp;rdquo;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To the left, the &amp;ldquo;Input&amp;rdquo; window is used to change the PDCCH configuration.&lt;/li&gt;
&lt;li&gt;To the right, the &amp;ldquo;UE&amp;rdquo; window is used to change what UEs to see and to add UEs.&lt;/li&gt;
&lt;li&gt;In the center, the &amp;ldquo;Grid&amp;rdquo; window is used to visualize PDCCH resources.&lt;/li&gt;
&lt;li&gt;In the bottom-left, the &amp;ldquo;Coreset&amp;rdquo; window is used to see what CCE indexes are being used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the &amp;ldquo;Grid&amp;rdquo; window, the gray area is the where the Coreset has its REGs. Each gray square represents an REG (the number is the REG number). PRBs start in the bottom and grow until the &amp;ldquo;No of PRBs&amp;rdquo; is reached.&lt;/p&gt;

&lt;h3 id=&#34;pdcch-configuration:c923872a82b4ab06f1d7ea7167df723b&#34;&gt;PDCCH configuration&lt;/h3&gt;

&lt;p&gt;The window to the leftmost can be used to change the PDCCH configuration.&lt;br&gt;
The fields in this window closely resemble those in the PDCCH configuration that is received in RRC message. If you know about PDCCH in NR, most of the fields will look familiar. Notice that you can add additional coresets and search spaces by increasing the &amp;ldquo;No of&amp;rdquo; fields.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;See for example how changing the duration of the Coreset causes the gray area to expand.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis2.gif&#34; alt=&#34;image2&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;It is also possible to add more Search Spaces and Coresets.&lt;br&gt;
In here, I add a new Search Space in the same Coreset (the new search space has different monitoring symbols).
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis3.gif&#34; alt=&#34;image3&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;pdcch-candidates:c923872a82b4ab06f1d7ea7167df723b&#34;&gt;PDCCH candidates&lt;/h3&gt;

&lt;p&gt;PDCCH candidates can be viewed by selecting &amp;ldquo;Cand x&amp;rdquo; from the UE window to the right.&lt;br&gt;&lt;/p&gt;

&lt;p&gt;See below how selecting &amp;ldquo;Cand 0&amp;rdquo;, shows where this PDCCH candidate is located in the time-frequency grid.&lt;br&gt;
Notice that 6 REGs turn red. This represents one CCE, and the color red is the color of our UE in the UE window.
The number inside the red REGs is the CCE index.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis4.gif&#34; alt=&#34;image4&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;If you prefer another color, this is how you change it.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis7.gif&#34; alt=&#34;image7&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;If you would like to see other aggregation levels, you can do this in the UE window.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis5.gif&#34; alt=&#34;image5&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;To add UEs, increase &amp;ldquo;No of UEs&amp;rdquo; in the UE window.&lt;br&gt;
Notice below that when expanding the UE1 tab, I select &amp;ldquo;Cand 0&amp;rdquo; for this new UE in order to see where it&amp;rsquo;s located in the time-frequency grid.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis6.gif&#34; alt=&#34;image5&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;By changing the slot, one can see how the location of the PDCCH candidates varies over time.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis8.gif&#34; alt=&#34;image8&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Eventually, when more than one UE is selected, the PDCCH candidates for each might overlap. When this happens, the color of the REG turns black.&lt;br&gt;
The &amp;ldquo;Coreset&amp;rdquo; window in the bottom-left shows the UEs whose PDCCH candidate uses a specific CCE index. This can be useful to see how many UEs are using each CCE index. &lt;br&gt;
Notice that in the time of overlap, for some CCE indexes the ueIdx = {0,1}. This means that the UEs with indexes 0 and 1 have PDCCH candidates on the same CCE.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis9.gif&#34; alt=&#34;image9&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;pdcch-interleaving:c923872a82b4ab06f1d7ea7167df723b&#34;&gt;PDCCH Interleaving&lt;/h3&gt;

&lt;p&gt;CCE to REG interleaving can be visualized by enabling it the Coreset configuration (&amp;ldquo;Input&amp;rdquo; window). We can see how the different interleaving parameters change CCE positions in the time-frequency grid.&lt;/p&gt;

&lt;p&gt;Below you can see how interleaving is enabled.&lt;br&gt;
Notice that a drop-down can be clicked to change interleaving parameters as desired (if the interleaving parameters results in an invalid configuration, an error message will be displayed and interleaving is not applied).
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis10.gif&#34; alt=&#34;image10&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In here, it is easy to see what effect is produced when changing the shift index.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/pdcchvis11.gif&#34; alt=&#34;image11&#34; /&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;future-work:c923872a82b4ab06f1d7ea7167df723b&#34;&gt;Future work&lt;/h3&gt;

&lt;p&gt;When I get some time I would like to add some new features and improvements in the tool.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Save and load configuration from disk&lt;/li&gt;
&lt;li&gt;Improve input method for monitoringSymbols and freqResources&lt;/li&gt;
&lt;li&gt;Support for monitoring slot periodicty and offset&lt;/li&gt;
&lt;li&gt;Auto-play slot time controls&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Frequency resource allocation in 5G NR</title>
      <link>https://peaceful-sinoussi-a9ee70.netlify.com/posts/freqass/</link>
      <pubDate>Thu, 01 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://peaceful-sinoussi-a9ee70.netlify.com/posts/freqass/</guid>
      <description>

&lt;p&gt;This post will be about some reflections I had when reading about the frequency resource allocation in 5G NR.
I will specifically discuss frequency resource allocation on DL since this is the
area I&amp;rsquo;ve been reading about.&lt;/p&gt;

&lt;p&gt;In addition to giving a short description of resource allocation in 5G NR, I set out to answer the following questions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Why are the nominal resource block group (RBG) sizes the values they are?&lt;/li&gt;
&lt;li&gt;Why are the non-nominal RBG sizes the values they are?&lt;/li&gt;
&lt;li&gt;How can we reason about the different combinations that can be encoded in resource allocation type 1?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If any of this sounds interesting, you might found the information below useful.&lt;/p&gt;

&lt;h2 id=&#34;resource-allocation-types:48fca4711c30e84e86cc59220dfa2379&#34;&gt;Resource allocation types&lt;/h2&gt;

&lt;p&gt;In 5G NR, there are two ways to describe frequency resource allocation in DL. The &amp;ldquo;frequency assignment&amp;rdquo; is part of the DCI, and is how the network tells the terminal what frequency resources will be used for PDSCH. &lt;br&gt;
There are two ways to describe frequency resource allocations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Resource allocation type 0&lt;/li&gt;
&lt;li&gt;Resource allocation type 1&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;resource-allocation-type-0:48fca4711c30e84e86cc59220dfa2379&#34;&gt;Resource allocation type 0&lt;/h2&gt;

&lt;p&gt;When using resource allocation type 0, the network tells the terminal the frequency resources to use by the way of a bitmap. &lt;br&gt;
It is tempting to think that we could use 1 bit per resource block in the bitmap, but this approach doesn&amp;rsquo;t scale well if we want to keep our control data overhead as small as possible. In 5G NR, there are a maximum of 275 resource blocks in DL, and allocating 1 bit per resource block would be costly.&lt;br&gt;
Instead, a tradeoff is reached: the number of bits is limited so that the DCI can remain small, but allocation resolution is reduced since 1 bit is used to represent a group of resource blocks (RBG) instead of uniquely representing a resource block.&lt;/p&gt;

&lt;p&gt;The size of the RBG varies by bandwidth as described in TS 38.214&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Bandwidth Part Size&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Configuration 1&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Configuration 2&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1 – 36&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;37 - 72&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;73 - 144&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;145 - 275&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The values in the table represent the &amp;ldquo;nominal&amp;rdquo; size of the RBG (denoted &lt;em&gt;P&lt;/em&gt;).&lt;/p&gt;

&lt;h5 id=&#34;why-these-nominal-rbg-sizes:48fca4711c30e84e86cc59220dfa2379&#34;&gt;Why these nominal RBG sizes?&lt;/h5&gt;

&lt;p&gt;Something that jumps out from the table is that RBG sizes are proportional to the size of the bandwidth - i.e. RBG sizes get bigger as bandwidth gets bigger. This makes sense given that if we were to use say size=2 for all bandwidths, larger bandwidths will have proportionally high number of RBGs which will mean a higher number of bits in the DCI to describe the frequency allocation.&lt;br&gt;
If we want to keep the number of RBGs constant regardless of bandwidth, the RBG size must get bigger as bandwidth increases. If you divide the max bandwidth size of each group in the table by the RBG size, you get exactly that: a constant number of RBGs - between 17-18 for Configuration 1. &lt;br&gt;
I believe this number was chosen to be compatible with resource allocation type 1 which is described in the next section. Frequency allocation type 1 has a specific number of combinations that can be represented. This number turns out to be 16 for the maximum bandwidth part size. &lt;br&gt;
This is similar to the size seen in this allocation type, so both allocation types use roughly the same number of bits in the DCI.&lt;/p&gt;

&lt;h5 id=&#34;so-what-are-the-non-nominal-rbgs:48fca4711c30e84e86cc59220dfa2379&#34;&gt;So what are the &amp;ldquo;non-nominal&amp;rdquo; RBGs?&lt;/h5&gt;

&lt;p&gt;If there are nominal RBG sizes, it is safe to assume that there will also be &amp;ldquo;non-nominal&amp;rdquo; RBG sizes. It turns out that &amp;ldquo;non-nominal&amp;rdquo; RBGs are RBGs whose size are smaller than the nominal ones.&lt;br&gt;
These RBGs are the first and last RBGs of the bandwidth part (BWP). Defined as follows in TS 38.214:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the size of the first RBG is &lt;img src=&#34;https://latex.codecogs.com/gif.latex?RBG_0^{size}&amp;amp;space;=&amp;amp;space;P&amp;amp;space;-&amp;amp;space;(bwpStart&#34; alt=&#34;eq&#34; /&gt;&amp;space;mod&amp;space;P)&lt;/li&gt;
&lt;li&gt;the size of the last RBG is &lt;img src=&#34;https://latex.codecogs.com/gif.latex?RBG_{last}^{size}&amp;amp;space;=&amp;amp;space;(bwpStart&amp;amp;space;&amp;amp;plus;&amp;amp;space;bwpSize&#34; alt=&#34;eq&#34; /&gt;&amp;space;mod&amp;space;P)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;why-these-non-nominal-rbg-sizes:48fca4711c30e84e86cc59220dfa2379&#34;&gt;Why these non-nominal RBG sizes?&lt;/h5&gt;

&lt;p&gt;I found that this comes from the fact that RBG boundaries are kept aligned regardless of a shift in the start of the BWP (bwpStart). The RBGs are defined for a zero-shifted bwpStart, and any RBGs that belong to a non-zero shifted bwpStart are aligned to the zero-shifted bwpStart.&lt;br&gt;
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/rbg.png&#34; alt=&#34;image3&#34; /&gt;&lt;br&gt;
 &lt;div style=&#34;text-align:center&#34;&gt;(left) bwpStart=0 means RBGs are equal to the nominal RBG sizes, while (right) bwpStart=2 means RBGs at both ends are different &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;In the figure above, notice that for bwpStart=2, RBGs at both ends of the bandwidth part are smaller (shaded gray in the figure). These are two &amp;ldquo;non-nominal&amp;rdquo; RBG sizes. From the figure, it is clear that if alignment is to be kept, the RBGs at both ends of the BWP will have a different size - a non-nominal size - if the start of the BWP is shifted.&lt;/p&gt;

&lt;h2 id=&#34;resource-allocation-type-1:48fca4711c30e84e86cc59220dfa2379&#34;&gt;Resource allocation type 1&lt;/h2&gt;

&lt;p&gt;When using resource allocation type 1 the network tells the terminal a start frequency resource and a number of contiguous frequency resources to use. &lt;br&gt;
This is different from type 0, wherein the terminal is given the resources to use by the way of a bitmap. Also different from type 0 is that in type 1, there is no longer a need
for RBGs. Instead, the precise starting resource block and the number of contiguously allocated resource blocks is signaled in the DCI. Both pieces of data (start and number) are encoded in a value called resource indication value (RIV).&lt;/p&gt;

&lt;h5 id=&#34;how-many-combinations-do-we-have-for-start-resource-block-number-of-resource-blocks-given-a-certain-bandwidth:48fca4711c30e84e86cc59220dfa2379&#34;&gt;How many combinations do we have for start resource block / number of resource blocks given a certain bandwidth?&lt;/h5&gt;

&lt;p&gt;To answer this question, I find it useful to think of a simple scenario. &lt;br&gt;
Suppose our bandwidth was equal to 4. If our start resource block is &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt;, there are four such start resource blocks:&lt;br&gt;
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/allocType1_startRBs.png&#34; alt=&#34;image1&#34; /&gt;
For each of those start resource blocks &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt;, we have a different number of resource blocks to use. This number is limited by the number of resource blocks ahead of the start resource block.&lt;br&gt;
If &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt; = 0, there four different allocation sizes (shown leftmost in the image below). If &lt;strong&gt;&lt;em&gt;S&lt;/em&gt;&lt;/strong&gt; = 1, there are three different allocation sized and so on.
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/allocType1.png&#34; alt=&#34;image2&#34; /&gt;
As can be seen in the image, in total we have 1 + 2 + 3 + 4 different possible configurations for our frequency allocation.&lt;br&gt;
We can easily generalize this to say that given a bandwidth &lt;em&gt;B&lt;/em&gt; there will be 1 + 2 + 3 &amp;hellip; + (&lt;em&gt;B&lt;/em&gt; - 1) + &lt;em&gt;B&lt;/em&gt; possible different possible configurations.&lt;br&gt;
Using the sum of natural numbers, this is equivalent to&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?%5Cfrac%7BB*%28B&amp;amp;plus;1%29%7D%7B2%7D&#34; alt=&#34;eq1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The above tells us how many combinations would be possible, but how many bits will we need in the DCI? &lt;br&gt;
We will need log2 number of bits (plus a ceil operator &lt;img src=&#34;https://latex.codecogs.com/gif.latex?%5Clceil%20.%20%5Crceil&#34; alt=&#34;eq5&#34; /&gt; to get the next integer)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?%5Clceil%20log_2%7B%28%5Cfrac%7BB*%28B&amp;amp;plus;1%29%7D%7B2%7D%29%7D%20%5Crceil&#34; alt=&#34;eq2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is analogous to the formula found in TS 38.212,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?%5Clceil%20log_2%20%7B%28%5Cfrac%7BN_%7BRB%7D%5E%7BDL%2CBWP%7D%20*%20%28N_%7BRB%7D%5E%7BDL%2CBWP%7D%20&amp;amp;plus;%201%29%7D%7B2%7D%29%7D%20%5Crceil&#34; alt=&#34;eq3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;where,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://latex.codecogs.com/gif.latex?N_%7BRB%7D%5E%7BDL%2CBWP%7D&#34; alt=&#34;eq4&#34; /&gt;
        = The number of resource blocks in the bandwidth part&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;img src=&#34;https://peaceful-sinoussi-a9ee70.netlify.com/images/black64x64.png&#34; alt=&#34;fin&#34; width=&#34;16&#34; align=&#34;right&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>